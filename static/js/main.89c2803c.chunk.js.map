{"version":3,"sources":["components/hocs/WithTooltip.jsx","components/hocs/WithLoading.jsx","components/hocs/WithLabel.jsx","utils/utility.js","components/layouts/FactFind/Tab/TabList.jsx","components/layouts/FactFind/Tab/TabListItem.jsx","components/layouts/FactFind/Table/TableRow.jsx","components/layouts/FactFind/Table/TableBody.jsx","components/forms/Button.jsx","components/layouts/FactFind/Table/TableData.jsx","components/layouts/FactFind/Table/TableFoot.jsx","components/layouts/FactFind/Table/TableHead.jsx","components/layouts/FactFind/Table/Table.jsx","components/layouts/FactFind/ColumnTable/ColumnTableData.jsx","components/layouts/FactFind/ColumnTable/TableRow.jsx","components/layouts/FactFind/ColumnTable/ColumnTableBody.jsx","components/layouts/FactFind/ColumnTable/ColumnTableHead.jsx","components/layouts/FactFind/ColumnTable/ColumnTable.jsx","components/forms/SelectOption.jsx","components/FactFind/componentList.js","components/layouts/FactFind/FactFind.jsx","components/layouts/FactFind/Section.jsx","components/layouts/FactFind/Tab/Tab.jsx","components/layouts/FactFind/Tab/TabPane.jsx","components/forms/Input.jsx","components/forms/Paragraph.jsx","components/forms/Select.jsx","components/FactFind/RecursiveFactfindBuilder.js","components/hocs/FactFind/WithModule.jsx","containers/FactFind/FactFind.jsx","serviceWorker.js","index.js"],"names":["WrappedComponent","WithLabel","props","label","restProps","returnElement","labelProps","className","position","LabelTextWithTooltip","tooltip","text","tooltipPosition","icon","msgLocation","tooltipElement","tabIndex","replace","WithTooltip","includes","htmlFor","data","id","TabList","children","TabListItem","key","value","disabled","href","link","TableRow","TableBody","tableRows","map","row","component","Button","name","type","required","onClick","TableData","columns","dynamic","removeRow","column","module","components","TableFoot","colspan","addRow","colSpan","TableHead","headings","Array","isArray","heading","addTableRow","nextRowIndex","setTableRows","tableRow","current","removeTableRow","rowIndex","prevTableRows","filter","Table","memo","useRef","memoHeadings","useMemo","col","header","useState","memoColspan","length","getColspan","caption","renderTableCaption","renderTableHead","renderTableBody","renderTableFoot","ColumnTableData","columnCount","currentRow","console","log","columnIds","ColumnTableBody","rows","ColumnTableHead","removeColumnTableRow","setColumnTableRows","ColumnTable","memoColumnCount","renderColumnTableCaption","renderColumnTableHead","renderColumnTableBody","SelectOption","componentList","FactFind","Section","Tab","items","item","TabPane","Input","placeholder","defaultValue","Paragraph","Select","options","multiple","size","option","RecursiveFactfindBuilder","restComponent","Component","ComponentWithModule","noRender","data-parent","parent","EmptyWithLoading","isLoading","setData","loading","setLoading","useEffect","timer","setTimeout","a","FactfindData","clearTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","onRender","phase","actualDuration","baseDuration","startTime","commitTime","interactions","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.89c2803c.chunk.js","sourcesContent":["import React from 'react';\nimport { convertSpace2NonBreakableSpace } from '../../utils/utility';\n\nexport const WithTooltip = WrappedComponent => props => {\n  const { tooltip, ...restProps } = props;\n\n  let returnElement = (\n    WrappedComponent ? <WrappedComponent {...restProps} /> : null\n  );\n\n  if (typeof tooltip !== \"object\" || typeof tooltip.text === \"undefined\") {\n    return returnElement;\n  }\n\n  const tooltipPosition = tooltip.position || \"right\";\n  const icon = tooltip.icon || \"info\";\n  const msgLocation = tooltip.msgLocation || \"right-all\";\n\n  const tooltipElement = (\n    <div className={`Tooltip m-tooltip m-tooltip--small ${tooltipPosition}`}>\n      <div className={`m-tooltip__trigger c-icon--${icon}`} tabIndex=\"0\" />\n\n      <div className={`m-tooltip__msg m-tooltip__msg--${msgLocation}`}>\n        {convertSpace2NonBreakableSpace(tooltip.text)}\n      </div>\n    </div>\n  );\n\n  returnElement = tooltip.position === \"left\"\n    ? (\n      <>\n        {tooltipElement}\n        {returnElement}\n      </>\n    )\n    : (\n      <>\n        {returnElement}\n        {tooltipElement}\n      </>\n    );\n\n  return returnElement;\n};\n","import React from 'react';\n\nexport const WithLoading = WrappedComponent => props => {\n  const { isLoading, ...restProps } = props;\n\n  if (!isLoading) {\n    return WrappedComponent === null\n      ? null\n      : <WrappedComponent {...restProps} />;\n  }\n\n  return <p>Hold on, fetching data might take some time...</p>;\n};\n","import React from 'react';\nimport { WithTooltip } from './WithTooltip';\n\nexport const WithLabel = WrappedComponent => props => {\n  const { label, ...restProps } = props;\n\n  let returnElement = (\n    WrappedComponent ? <WrappedComponent {...restProps} /> : null\n  );\n\n  if (!label) {\n    return returnElement;\n  }\n\n  const labelProps = {};\n  labelProps.className = label.position;\n\n  const LabelTextWrapper = \"div\";\n  const LabelText = () => <LabelTextWrapper className=\"LabelTextWrapper\">{label.text}</LabelTextWrapper>;\n  const LabelTextWithTooltip = WithTooltip(LabelText);\n\n  returnElement = [\"bottom\", \"right\"].includes(label.position)\n    ? (\n      <>\n        {returnElement}\n        <LabelTextWithTooltip {...restProps} />\n      </>\n    ) : (\n      <>\n        <LabelTextWithTooltip {...restProps} />\n        {returnElement}\n      </>\n    );\n\n  return (\n    <label htmlFor={restProps.data.id} {...labelProps}>\n      {returnElement}\n    </label>\n  );\n};\n","export function getDisplayName(component) {\n  return component.displayName || component.name || 'Component';\n}\n\nexport function convertSpace2NonBreakableSpace(text) {\n  return text.replace(/ /g, \"\\u00a0\");\n}\n","import React from 'react'\n\nexport const TabList = props => (\n  <ul className={`TabList ${props.className}`}>\n    {props.children}\n  </ul>\n);\n","import React from 'react'\n\nexport const TabListItem = props => (\n  <li\n    key={props.id || props.value}\n    id={props.id || \"\"}\n    disabled={props.disabled || false}\n    className={`TabListItem ${props.className}`}\n  >\n    <a href={`#${props.link || \"\"}`} className=\"TabListItemLink\">{props.value || \"Default value\"}</a>\n  </li>\n);\n","import React from 'react'\n\nexport const TableRow = ({ id, children, ...restProps }) => (\n  <tr key={id} className=\"tableBodyRow\">\n    {children}\n  </tr>\n);\n","import React from 'react'\nimport { TableRow } from './TableRow';\n\nexport const TableBody = ({ tableRows, ...restProps }) => (\n  <tbody className=\"tableBody\">\n    {tableRows.map(row => (\n      <TableRow key={row.id}>\n        {row.component}\n      </TableRow>\n    ))}\n  </tbody>\n);\n","import React from 'react'\n\nexport const Button = props => (\n  <button\n    id={props.data.id || \"button\"}\n    name={props.data.name || \"button\"}\n    type={props.data.type || \"button\"}\n    required={props.data.required || false}\n    disabled={props.data.disabled || false}\n    className={props.className || \"button\"}\n    onClick={props.onClick}\n  >\n    {props.data.value || \"\"}\n  </button>\n);\n","import React from 'react'\nimport { RecursiveFactfindBuilder } from '../../../FactFind/RecursiveFactfindBuilder';\nimport { Button } from '../../../forms/Button';\n\nexport const TableData = ({ columns, dynamic, removeRow, ...restProps }) => (\n  <>\n    {columns.map(column => (\n      <td key={column.module.id} className=\"tableBodyColumn\">\n        <RecursiveFactfindBuilder components={[column]} />\n      </td>\n    ))}\n    {dynamic &&\n      <td className=\"tableBodyColumn\">\n        <Button className=\"tableBodyRemoveRowButton\" data={{value: \"remove\"}} onClick={removeRow} />\n      </td>\n    }\n  </>\n);\n","import React from 'react'\nimport { Button } from '../../../forms/Button'\n\nexport const TableFoot = ({ dynamic, colspan, addRow, ...restProps }) => (\n  dynamic\n      ? (\n        <tfoot className=\"tableFoot\">\n          <tr className=\"tableFootRow\">\n            <td colSpan={colspan || 1} className=\"tableFootColumn\">\n              <Button className=\"tableFootAddRowButton\" data={{value: \"Add row\"}} onClick={addRow} />\n            </td>\n          </tr>\n        </tfoot>\n      )\n      : null\n);\n","import React from 'react'\n\nexport const TableHead = ({ headings, dynamic, ...restProps }) => (\n  Array.isArray(headings) && (\n    <thead className=\"tableHead\">\n      <tr className=\"tableHeadRow\">\n        {headings.map(heading => (\n          <th\n            key={heading.id}\n            id={heading.id}\n            className=\"tableHeadColumn\"\n          >\n            {heading.label}\n          </th>\n        ))}\n        {dynamic &&\n          <th className=\"tableHeadColumn\"></th>\n        }\n      </tr>\n    </thead>\n  )\n);\n","import React, { memo, useEffect, useMemo, useRef, useState } from 'react'\nimport { TableBody } from './TableBody';\nimport { TableData } from './TableData';\nimport { TableFoot } from './TableFoot';\nimport { TableHead } from './TableHead';\n\nconst renderTableCaption = ({ caption }) => (\n  caption &&\n    <caption>{caption}</caption>\n);\n\nconst renderTableHead = ({ headings, dynamic }) => (\n  <TableHead headings={headings} dynamic={dynamic} />\n);\n\nconst renderTableBody = ({ tableRows }) => (\n  <TableBody tableRows={tableRows} />\n);\n\nconst renderTableFoot = ({colspan, dynamic, addRow}) => (\n  <TableFoot dynamic={dynamic} colspan={colspan} addRow={addRow} />\n);\n\nconst addTableRow = ({ data, nextRowIndex, setTableRows, ...restArgs }) => () => {\n  const tableRow = Array.isArray(data.columns) && {\n    id: nextRowIndex.current,\n    component: <TableData\n      key={nextRowIndex.current}\n      id={nextRowIndex.current}\n      columns={data.columns}\n      dynamic={data.dynamic}\n      removeRow={removeTableRow({ rowIndex: nextRowIndex.current, setTableRows })}\n    />\n  };\n\n  if (tableRow) {\n    nextRowIndex.current++;\n    setTableRows(prevTableRows => [...prevTableRows, tableRow]);\n  }\n};\n\nconst removeTableRow = ({ rowIndex, setTableRows, ...restArgs }) => () => {\n  setTableRows(prevTableRows => prevTableRows.filter(row => row.id !== rowIndex));\n};\n\nconst getHeadings = ({ columns }) =>(\n  columns.map(col => ({id: col.data.id, label: col.data.header}))\n);\n\nconst getColspan = ({ headings, dynamic }) =>(\n  headings.length + (dynamic ? 1 : 0)\n);\n\nexport const Table = memo(({ data, children, ...restProps }) => {\n  const nextRowIndex = useRef(1);\n  const memoHeadings = useMemo(\n    () => getHeadings({columns: data.columns}),\n    [data.columns]\n  );\n  const [headings] = useState(() => memoHeadings);\n  const memoColspan = useMemo(\n    () => getColspan({headings, dynamic: data.dynamic}),\n    [headings, data.dynamic]\n  );\n  const [colspan] = useState(() => memoColspan);\n  const [tableRows, setTableRows] = useState([]);\n\n  // useEffect(\n  //   () => {\n  //     addTableRow({ data, nextRowIndex, setTableRows })();\n  //     addTableRow({ data, nextRowIndex, setTableRows })();\n  //   },\n  //   [data]\n  // );\n\n  return (\n    <table className=\"table\">\n      {renderTableCaption({caption: data.caption})}\n      {renderTableHead({\n        headings,\n        dynamic: data.dynamic\n      })}\n      {renderTableBody({\n        tableRows,\n        removeRow: removeTableRow({ nextRowIndex })\n      })}\n      {renderTableFoot({\n        dynamic: data.dynamic,\n        colspan,\n        addRow: addTableRow({ data, nextRowIndex, setTableRows })\n      })}\n    </table>\n  );\n});\n","import React from 'react'\nimport { RecursiveFactfindBuilder } from '../../../FactFind/RecursiveFactfindBuilder';\nimport { Button } from '../../../forms/Button';\n\nexport const ColumnTableData = ({ row, headings, columnCount, dynamic, removeRow, ...restProps }) => (\n  <>\n    <th>{row.data.header}</th>\n    {headings.map(heading => {\n      const currentRow = {...row};\nconsole.log(\"CTD\", {...currentRow})\n      if (row.data.id.includes(\"temp\") && row.columnIds) {\n        currentRow.data = {...row.data, id: `data-${row.columnIds[heading.id]}`};\n      }\n\n      return (\n        <td key={heading.id} className=\"tableBodyColumn\">\n          <RecursiveFactfindBuilder components={[currentRow]} />\n        </td>\n      );\n    })}\n    {dynamic &&\n      <td className=\"tableBodyColumn\">\n        <Button className=\"tableBodyRemoveRowButton\" data={{value: \"remove\"}} onClick={removeRow} />\n      </td>\n    }\n  </>\n);\n","import React from 'react'\n\nexport const TableRow = ({ children, ...restProps }) => (\n  <tr className=\"tableBodyRow\">\n    {children}\n  </tr>\n);\n","import React from 'react'\nimport { ColumnTableData } from './ColumnTableData';\nimport { TableRow } from './TableRow';\n\nexport const ColumnTableBody = ({ rows, headings, columnCount, ...restProps }) => {\n  console.log(\"CTB\", rows)\n  return (\n    <tbody className=\"tableBody\">\n      {rows.map(row => (\n        <TableRow key={row.data.id}>\n          <ColumnTableData row={row} headings={headings} columnCount={columnCount} />\n        </TableRow>\n      ))}\n    </tbody>\n  );\n}\n","import React from 'react'\n\nexport const ColumnTableHead = ({ headings, dynamic, ...restProps }) => (\n  Array.isArray(headings) && (\n    <thead className=\"tableHead\">\n      <tr className=\"tableHeadRow\">\n        <th className=\"tableHeadColumn\">&nbsp;</th>\n        {headings.map(heading => (\n          <th\n            key={heading.id}\n            id={heading.id}\n            className=\"tableHeadColumn\"\n          >\n            {heading.label}\n          </th>\n        ))}\n        {dynamic &&\n          <th className=\"tableHeadColumn\">&nbsp;</th>\n        }\n      </tr>\n    </thead>\n  )\n);\n","import React, { memo, useMemo, useRef, useState } from 'react'\nimport { ColumnTableBody } from './ColumnTableBody';\n// import { ColumnTableData } from './ColumnTableData';\n// import { TableFoot } from './TableFoot';\nimport { ColumnTableHead } from './ColumnTableHead';\n\nconst renderColumnTableCaption = ({ caption, ...restArgs }) => (\n  caption &&\n    <caption>{caption}</caption>\n);\n\nconst renderColumnTableHead = ({ headings, dynamic, ...restArgs }) => (\n  <ColumnTableHead headings={headings} dynamic={dynamic} />\n);\n\nconst renderColumnTableBody = ({ rows, headings, columnCount, ...restArgs }) => (\n  <ColumnTableBody rows={rows} headings={headings} columnCount={columnCount} />\n);\n\n// const renderColumnTableFoot = ({ colspan, dynamic, addRow, ...restArgs }) => (\n//   <TableFoot dynamic={dynamic} colspan={colspan} addRow={addRow} />\n// );\n\n// const addColumnTableRow = ({ data, nextRowIndex, tableRows, setColumnTableRows, ...restArgs }) => () => {\n//   const columnTableRow = Array.isArray(data.columns) &&\n//     {\n//       id: nextRowIndex.current,\n//       component: <ColumnTableData\n//         key={nextRowIndex.current}\n//         id={nextRowIndex.current}\n//         row={data.columns}\n//         dynamic={data.dynamic}\n//         removeRow={removeColumnTableRow({ rowIndex: nextRowIndex.current, setColumnTableRows })}\n//       />\n//     };\n\n//   if (columnTableRow) {\n//     nextRowIndex.current++;\n//     setColumnTableRows(prevColumnTableRows => [...prevColumnTableRows, columnTableRow]);\n//   }\n// };\n\nconst removeColumnTableRow = ({ rowIndex, setColumnTableRows, ...restArgs }) => () => {\n  setColumnTableRows(prevTableRows => {\n    const rows = prevTableRows.filter(row => row.id !== rowIndex);\n\n    return rows;\n  });\n};\n\nconst getColumnCount = ({ headings }) => headings.length;\n\n// const getColspan = ({ columnCount, dynamic }) =>(\n//   columnCount + (dynamic ? 1 : 0)\n// );\n\nexport const ColumnTable = memo(({ data, children, ...restProps }) => {\n  const nextRowIndex = useRef(1);\n  const memoColumnCount = useMemo(\n    () => getColumnCount({headings: data.headings}),\n    [data.headings]\n  );\n  const [columnCount] = useState(() => memoColumnCount);\n  // const memoColspan = useMemo(\n  //   () => getColspan({columnCount, dynamic: data.dynamic}),\n  //   [columnCount, data.dynamic]\n  // );\n  // const [colspan] = useState(() => memoColspan);\n  // const [columntableRows, setColumnTableRows] = useState([]);\n\n  return (\n    <table className=\"table\">\n      {renderColumnTableCaption({caption: data.caption})}\n      {renderColumnTableHead({\n        headings: data.headings,\n        dynamic: data.dynamic\n      })}\n      {renderColumnTableBody({\n        rows: data.rows,\n        headings: data.headings,\n        columnCount,\n        removeRow: removeColumnTableRow({ nextRowIndex })\n      })}\n      {/* {renderColumnTableFoot({\n        dynamic: data.dynamic,\n        colspan,\n        addRow: addColumnTableRow({ data, nextRowIndex, columntableRows, setColumnTableRows })\n      })} */}\n    </table>\n  );\n});\n","import React from 'react'\n\nexport const SelectOption = props => (\n  <option\n    key={props.id || props.value}\n    label={props.label}\n    value={props.value || props.label}\n    disabled={props.disabled || false}\n    className={props.className || \"selectOption\"}\n  />\n);\n","\nimport { FactFind } from '../layouts/FactFind/FactFind'\nimport { Section } from '../layouts/FactFind/Section'\nimport { Tab } from '../layouts/FactFind/Tab/index'\nimport { TabPane } from '../layouts/FactFind/Tab/TabPane'\nimport { Table } from '../layouts/FactFind/Table/index'\nimport { ColumnTable } from '../layouts/FactFind/ColumnTable/index'\nimport { Button } from '../forms/Button'\nimport { Input } from '../forms/Input'\nimport { Paragraph } from '../forms/Paragraph'\nimport { Select } from '../forms/Select'\n\nexport const componentList = {\n  FactFind,\n  Section,\n  Tab,\n  TabPane,\n  Table,\n  ColumnTable,\n  Button,\n  Input,\n  Paragraph,\n  Select\n};\n","import React from 'react'\n\nexport const FactFind = ({ data, children, ...restProps }) => (\n  <>\n    <header>{data.header}</header>\n    {children}\n  </>\n);\n","import React from 'react'\n\nexport const Section = ({ data, children, ...restProps }) => (\n  <>\n    <header>{data.header}</header>\n    {children}\n  </>\n);\n","import React from 'react'\nimport { TabList } from './TabList'\nimport { TabListItem } from './TabListItem'\n\nexport const Tab = ({ data ,children, ...restProps }) => (\n  <>\n    <TabList>\n      {data.items.map(item => (\n        <TabListItem\n          key={item.id}\n          {...item}\n        />\n      ))}\n    </TabList>\n    {children}\n  </>\n);\n","export const TabPane = ({ data, children, ...restProps }) => (\n  children\n);\n","import React from 'react'\n\nexport const Input = props => (\n  <input\n    id={props.data.id || \"input\"}\n    name={props.data.name || \"input\"}\n    type={props.data.type || \"text\"}\n    placeholder={props.data.placeholder || \"Default placeholder\"}\n    defaultValue={props.data.defaultValue}\n    // value={props.value}\n    required={props.data.required || false}\n    disabled={props.data.disabled || false}\n    className={props.className || \"input\"}\n  />\n);\n","import React from 'react'\n\nexport const Paragraph = props => (\n  <p\n    id={props.data.id || \"paragraph\"}\n    name={props.data.name || \"paragraph\"}\n    className={props.className || \"paragraph\"}\n  >\n    {props.data.value || \"\"}\n  </p>\n);\n","import React from 'react'\nimport { SelectOption } from './SelectOption'\n\nexport const Select = props => {\n  if (!props.data.options) {\n    return <p>Options array missing.</p>;\n  }\n  if (!props.data.options.length) {\n    return <p>Options array empty.</p>\n  }\n\n  return (\n    <select\n      id={props.data.id || \"select\"}\n      name={props.data.name || \"select\"}\n      defaultValue={props.data.defaultValue || \"\"}\n      // value={props.value || \"\"}\n      required={props.data.required || false}\n      disabled={props.data.disabled || false}\n      multiple={props.data.multiple || false}\n      size={props.data.size || 0}\n      className={props.className || \"select\"}\n    >\n      {props.data.options.map(option => (\n        <SelectOption\n          key={option.id || option.label}\n          {...option}\n        />\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\nimport { WithLabel } from '../hocs/WithLabel';\nimport { componentList } from \"./componentList\";\nimport { WithModule } from '../hocs/FactFind/WithModule';\n\n// Recursive component\nexport const RecursiveFactfindBuilder = ({ components, ...restProps }) => (\n  components.map(({ module, children, ...restComponent }) => {\n    if (!module) {\n      return null;\n    }\n\n    let Component = componentList[module.type] || null;\n    if (Component && restComponent.label) {\n      Component = WithLabel(Component);\n    }\n    const ComponentWithModule = WithModule(Component);\n\n    return (\n      <ComponentWithModule\n        {...restComponent}\n        module={module}\n        key={module.id}\n      >\n        {(Array.isArray(children) && children.length > 0) &&\n          <RecursiveFactfindBuilder components={children} />\n        }\n      </ComponentWithModule>\n    );\n  })\n);\n","import React from 'react';\n\nexport const WithModule = WrappedComponent => props => {\n  const { module, ...restProps } = props;\n\n  const returnElement = (\n    WrappedComponent ? <WrappedComponent {...restProps} /> : null\n  );\n\n  if (!module || module.noRender) {\n    return returnElement;\n  }\n\n  return (\n    <div\n      key={module.id}\n      id={module.name || module.id}\n      className={`module ${module.type}`}\n      data-parent={module.parent}\n    >\n      {returnElement}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { WithLoading } from '../../components/hocs/WithLoading';\nimport { RecursiveFactfindBuilder } from '../../components/FactFind/RecursiveFactfindBuilder';\nimport FactfindData from '../../data/factfind.json';\n\nconst EmptyWithLoading = WithLoading(null);\n\nexport const FactFind = props => {\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(\n    () => {\n      const timer = setTimeout(\n        async () => {\n          // const response = await fetch('model/factfind.json');\n          // if (!response.ok) {\n          //   return false;\n          // }\n          // const apiData = await response.json();\n          const apiData = FactfindData || {};\n          setData(apiData);\n          setLoading(false);\n        },\n        500\n      );\n\n      return () => {\n        clearTimeout(timer);\n      };\n    },\n    []\n  );\n\n  if (loading) {\n    return <EmptyWithLoading isLoading={loading} />;\n  }\n\n  return (\n    <RecursiveFactfindBuilder components={[data]} />\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.scss';\nimport { FactFind } from './containers/FactFind';\nimport * as serviceWorker from './serviceWorker';\nimport { Profiler } from 'react';\n\nconst onRenderCallback = (\n  id, // the \"id\" prop of the Profiler tree that has just committed\n  phase, // either \"mount\" (if the tree just mounted) or \"update\" (if it re-rendered)\n  actualDuration, // time spent rendering the committed update\n  baseDuration, // estimated time to render the entire subtree without memoization\n  startTime, // when React began rendering this update\n  commitTime, // when React committed this update\n  interactions // the Set of interactions belonging to this update\n) => {\n  console.log(\"PFR\", id, phase, actualDuration, baseDuration, startTime, commitTime, interactions);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Profiler id=\"FactFind\" onRender={onRenderCallback}>\n      <FactFind />\n    </Profiler>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}