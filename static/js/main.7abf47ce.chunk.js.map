{"version":3,"sources":["components/hocs/WithLoading.jsx","components/hocs/WithLabel.jsx","components/forms/SelectOption.jsx","components/componentList.js","components/forms/Input.jsx","components/forms/Paragraph.jsx","components/forms/Select.jsx","components/Module.js","App.js","serviceWorker.js","index.js"],"names":["WithLoading","WrappedComponent","props","isLoading","form","passThroughProps","WithLabel","label","console","log","htmlFor","id","SelectOption","key","value","disabled","componentList","Input","name","type","defaultValue","required","Paragraph","Select","options","length","multiple","size","map","option","Module","modules","module","Component","data","className","parent","children","EmptyWithLoading","App","state","loading","setTimeout","a","FactfindData","setState","this","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6RAgBeA,MAdf,SAAqBC,GACnB,OAAO,SAA8BC,GAAQ,IACnCC,EAAyCD,EAAzCC,UAAWC,EAA8BF,EAA9BE,KAASC,EADc,YACOH,EADP,sBAG1C,OAAKC,EAME,2EALuB,OAArBF,EACH,KACA,kBAACA,EAAD,iBAAsBG,EAAUC,MCW3BC,MAlBf,SAAmBL,GACjB,OAAO,SAA4BC,GAAQ,IACjCK,EAA+BL,EAA/BK,MAAUF,EADsB,YACDH,EADC,WAIxC,OAFAM,QAAQC,IAAI,MAAOF,EAAOF,GAErBE,EAKH,2BAAOG,QAASL,EAAiBM,IAC/B,8BAAOJ,GACP,kBAACN,EAAqBI,IANjB,kBAACJ,EAAqBI,KCNpB,SAASO,EAAaV,GACnC,OACE,4BACEW,IAAKX,EAAMS,IAAMT,EAAMY,MACvBP,MAAOL,EAAMK,MACbO,MAAOZ,EAAMY,OAASZ,EAAMK,MAC5BQ,SAAUb,EAAMa,WAAY,ICHlC,IAMeC,EANO,CACpBC,MCJa,SAAef,GAC5B,OACE,2BACES,GAAIT,EAAMS,IAAM,QAChBO,KAAMhB,EAAMgB,MAAQ,QACpBC,KAAMjB,EAAMiB,MAAQ,OACpBC,aAAclB,EAAMkB,cAAgB,gBAEpCC,SAAUnB,EAAMmB,WAAY,EAC5BN,SAAUb,EAAMa,WAAY,KDJhCO,UELa,SAAmBpB,GAChC,OACE,uBACES,GAAIT,EAAMS,IAAM,YAChBO,KAAMhB,EAAMgB,MAAQ,aAEnBhB,EAAMY,OAAS,KFApBS,OGLa,SAAgBrB,GAC7B,OAAKA,EAAMsB,QAGNtB,EAAMsB,QAAQC,OAKjB,4BACEd,GAAIT,EAAMS,IAAM,SAChBO,KAAMhB,EAAMgB,MAAQ,SACpBE,aAAclB,EAAMkB,cAAgB,GAEpCC,SAAUnB,EAAMmB,WAAY,EAC5BN,SAAUb,EAAMa,WAAY,EAC5BW,SAAUxB,EAAMwB,WAAY,EAC5BC,KAAMzB,EAAMyB,MAAQ,GAEnBzB,EAAMsB,QAAQI,KAAI,SAAAC,GAAM,OACvB,kBAACjB,EAAD,eACEC,IAAKgB,EAAOlB,IAAMkB,EAAOtB,OACrBsB,QAjBH,0CAHA,OC2BIC,EA3BA,SAATA,EAAU,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OACE,oCACGA,EAAQH,KAAI,SAAAI,GACX,IAAIC,EAAYjB,EAAcgB,EAAOA,OAAOb,OAAS,KAKrD,OAJIc,GAAaD,EAAOE,KAAK3B,QAC3B0B,EAAY3B,EAAU2B,IAItB,yBACEpB,IAAKmB,EAAOA,OAAOrB,GACnBA,GAAIqB,EAAOA,OAAOrB,GAClBO,KAAMc,EAAOA,OAAOb,KACpBgB,UAAWH,EAAOA,OAAOI,QAEV,OAAdH,EAAqB,KAAO,kBAACA,EAAcD,EAAOE,MACjDF,EAAOK,UAAYL,EAAOK,SAASZ,OAAS,GAC5C,kBAACK,EAAD,CACEC,QAASC,EAAOK,iB,OClB1BC,EAAmBtC,EAAY,MAyCtBuC,E,4MAtCbC,MAAQ,CACNC,SAAS,EACTP,KAAM,M,kEAGa,IAAD,OAClBQ,WAAU,sBACR,4BAAAC,EAAA,sDAQQT,EAAOU,EACb,EAAKC,SAAS,CACZJ,SAAS,EACTP,KAAMA,GAAQ,KAXlB,2CAcA,O,+BAKF,OAAIY,KAAKN,MAAMC,QACN,kBAACH,EAAD,CAAkBnC,UAAW2C,KAAKN,MAAMC,UAI/C,kBAAC,EAAD,CACEV,QAAS,CAACe,KAAKN,MAAMN,Y,GAjCXa,iBCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,a","file":"static/js/main.7abf47ce.chunk.js","sourcesContent":["import React from 'react';\n\nfunction WithLoading(WrappedComponent) {\n  return function WithLoadingComponent(props) {\n    const { isLoading, form, ...passThroughProps } = props;\n\n    if (!isLoading) {\n      return WrappedComponent === null\n        ? null\n        : <WrappedComponent {...form} {...passThroughProps} />;\n    }\n\n    return <p>Hold on, fetching data might take some time.</p>;\n  };\n}\n\nexport default WithLoading;\n","import React from 'react';\n\nfunction WithLabel(WrappedComponent) {\n  return function WithLabelComponent(props) {\n    const { label, ...passThroughProps } = props;\n    console.log(\"wla\", label, passThroughProps);\n\n    if (!label) {\n      return <WrappedComponent {...passThroughProps} />;\n    }\n\n    return (\n      <label htmlFor={passThroughProps.id}>\n        <span>{label}</span>\n        <WrappedComponent {...passThroughProps} />\n      </label>\n    );\n  };\n}\n\nexport default WithLabel;\n","import React from 'react'\n\nexport default function SelectOption(props) {\n  return (\n    <option\n      key={props.id || props.value}\n      label={props.label}\n      value={props.value || props.label}\n      disabled={props.disabled || false}\n    />\n  );\n}\n","\nimport Input from './forms/Input'\nimport Paragraph from './forms/Paragraph'\nimport Select from './forms/Select'\n\nconst componentList = {\n  Input,\n  Paragraph,\n  Select\n};\n\nexport default componentList;\n","import React from 'react'\n\nexport default function Input(props) {\n  return (\n    <input\n      id={props.id || \"input\"}\n      name={props.name || \"input\"}\n      type={props.type || \"text\"}\n      defaultValue={props.defaultValue || \"Default Value\"}\n      // value={props.value || \"\"}\n      required={props.required || false}\n      disabled={props.disabled || false}\n    />\n  );\n}\n","import React from 'react'\n\nexport default function Paragraph(props) {\n  return (\n    <p\n      id={props.id || \"paragraph\"}\n      name={props.name || \"paragraph\"}\n    >\n      {props.value || \"\"}\n    </p>\n  );\n}\n","import React from 'react'\nimport SelectOption from './SelectOption'\n\nexport default function Select(props) {\n  if (!props.options) {\n    return null;\n  }\n  if (!props.options.length) {\n    return <p>No options.</p>\n  }\n\n  return (\n    <select\n      id={props.id || \"select\"}\n      name={props.name || \"select\"}\n      defaultValue={props.defaultValue || \"\"}\n      // value={props.value || \"\"}\n      required={props.required || false}\n      disabled={props.disabled || false}\n      multiple={props.multiple || false}\n      size={props.size || 0}\n    >\n      {props.options.map(option => (\n        <SelectOption\n          key={option.id || option.label}\n          {...option}\n        />\n      ))}\n    </select>\n  );\n}\n","import React from 'react';\nimport WithLabel from './hocs/WithLabel';\nimport componentList from \"./componentList\";\n\n// Recursive component\nconst Module = ({ modules }) => {\n  return (\n    <>\n      {modules.map(module => {\n        let Component = componentList[module.module.type] || null;\n        if (Component && module.data.label) {\n          Component = WithLabel(Component);\n        }\n\n        return (\n          <div\n            key={module.module.id}\n            id={module.module.id}\n            name={module.module.type}\n            className={module.module.parent}\n          >\n            {Component === null ? null : <Component {...module.data} />}\n            {(module.children && module.children.length > 0) &&\n              <Module\n                modules={module.children} />}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Module;\n","import React, { PureComponent } from 'react';\nimport './App.css';\nimport WithLoading from './components/hocs/WithLoading';\nimport Module from './components/Module';\nimport FactfindData from './data/factfind.json';\n\nconst EmptyWithLoading = WithLoading(null);\n\nclass App extends PureComponent {\n  state = {\n    loading: true,\n    data: null\n  };\n\n  componentDidMount() {\n    setTimeout(\n      async () => {\n        // const response = await fetch('model/factfind.json');\n        // console.log(response);\n        // if (!response.ok) {\n        //   return false;\n        // }\n        // console.log(await response.json());\n        // const data = await response.json();\n        const data = FactfindData;\n        this.setState({\n          loading: false,\n          data: data || {}\n        });\n      },\n      2000\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <EmptyWithLoading isLoading={this.state.loading} />;\n    }\n\n    return (\n      <Module\n        modules={[this.state.data]}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}