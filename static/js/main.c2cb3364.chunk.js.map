{"version":3,"sources":["components/hocs/WithLoading.jsx","components/layouts/FactFind/TabList.jsx","components/layouts/FactFind/TabListItem.jsx","components/forms/SelectOption.jsx","components/FactFind/componentList.js","components/layouts/FactFind/FactFind.jsx","components/layouts/FactFind/Section.jsx","components/layouts/FactFind/Tab.jsx","components/forms/Button.jsx","components/forms/Input.jsx","components/forms/Paragraph.jsx","components/forms/Select.jsx","components/FactFind/RecursiveFactfindBuilder.js","components/hocs/WithLabel.jsx","components/hocs/FactFind/WithModule.jsx","containers/FactFind/FactFind.jsx","serviceWorker.js","index.js"],"names":["WrappedComponent","TabList","props","className","children","TabListItem","key","id","value","disabled","href","link","SelectOption","label","componentList","FactFind","data","header","Section","Tab","items","map","item","Button","name","type","required","Input","defaultValue","Paragraph","Select","options","length","multiple","size","option","RecursiveFactfindBuilder","components","component","Component","module","restProps","labelProps","position","LabelWrapper","includes","labelText","text","labelContent","htmlFor","ComponentWithModule","returnElement","data-parent","parent","WithModule","EmptyWithLoading","isLoading","useState","setData","loading","setLoading","useEffect","timer","setTimeout","a","FactfindData","clearTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2cb3364.chunk.js","sourcesContent":["import React from 'react';\n\nexport const WithLoading = WrappedComponent => props => {\n  const { isLoading, ...restProps } = props;\n\n  if (!isLoading) {\n    return WrappedComponent === null\n      ? null\n      : <WrappedComponent {...restProps} />;\n  }\n\n  return <p>Hold on, fetching data might take some time...</p>;\n};\n","import React from 'react'\n\nexport const TabList = props => (\n  <ul className=\"TabList\">\n    {props.children}\n  </ul>\n);\n","import React from 'react'\n\nexport const TabListItem = props => (\n  <li\n    key={props.id || props.value}\n    id={props.id || \"\"}\n    disabled={props.disabled || false}\n    className={props.className || \"TabListItem\"}\n  >\n    <a href={`#${props.link || \"\"}`} className=\"TabListItemLink\">{props.value || \"Default value\"}</a>\n  </li>\n);\n","import React from 'react'\n\nexport const SelectOption = props => (\n  <option\n    key={props.id || props.value}\n    label={props.label}\n    value={props.value || props.label}\n    disabled={props.disabled || false}\n    className={props.className || \"selectOption\"}\n  />\n);\n","\nimport { FactFind } from '../layouts/FactFind/FactFind'\nimport { Section } from '../layouts/FactFind/Section'\nimport { Tab } from '../layouts/FactFind/Tab'\nimport { Button } from '../forms/Button'\nimport { Input } from '../forms/Input'\nimport { Paragraph } from '../forms/Paragraph'\nimport { Select } from '../forms/Select'\n\nexport const componentList = {\n  FactFind,\n  Section,\n  Tab,\n  Button,\n  Input,\n  Paragraph,\n  Select\n};\n","import React from 'react'\n\nexport const FactFind = ({data, ...restProps}) => (\n  <header>{data.header}</header>\n);\n","import React from 'react'\n\nexport const Section = ({data, ...restProps}) => (\n  <header>{data.header}</header>\n);\n","import React from 'react'\nimport { TabList } from './TabList'\nimport { TabListItem } from './TabListItem'\n\nexport const Tab = ({data, ...restProps}) => (\n  <TabList>\n    {data.items.map(item => (\n      <TabListItem\n        key={item.id}\n        {...item}\n      />\n    ))}\n  </TabList>\n);\n","import React from 'react'\n\nexport const Button = props => (\n  <button\n    id={props.data.id || \"button\"}\n    name={props.data.name || \"button\"}\n    type={props.data.type || \"button\"}\n    required={props.data.required || false}\n    disabled={props.data.disabled || false}\n    className={props.className || \"button\"}\n  >\n    {props.data.value || \"\"}\n  </button>\n);\n","import React from 'react'\n\nexport const Input = props => (\n  <input\n    id={props.data.id || \"input\"}\n    name={props.data.name || \"input\"}\n    type={props.data.type || \"text\"}\n    defaultValue={props.data.defaultValue || \"Default Value\"}\n    // value={props.value || \"\"}\n    required={props.data.required || false}\n    disabled={props.data.disabled || false}\n    className={props.className || \"input\"}\n  />\n);\n","import React from 'react'\n\nexport const Paragraph = props => (\n  <p\n    id={props.data.id || \"paragraph\"}\n    name={props.data.name || \"paragraph\"}\n    className={props.className || \"paragraph\"}\n  >\n    {props.data.value || \"\"}\n  </p>\n);\n","import React from 'react'\nimport { SelectOption } from './SelectOption'\n\nexport const Select = props => {\n  if (!props.data.options) {\n    return <p>Options array missing.</p>;\n  }\n  if (!props.data.options.length) {\n    return <p>Options array empty.</p>\n  }\n\n  return (\n    <select\n      id={props.data.id || \"select\"}\n      name={props.data.name || \"select\"}\n      defaultValue={props.data.defaultValue || \"\"}\n      // value={props.value || \"\"}\n      required={props.data.required || false}\n      disabled={props.data.disabled || false}\n      multiple={props.data.multiple || false}\n      size={props.data.size || 0}\n      className={props.className || \"select\"}\n    >\n      {props.data.options.map(option => (\n        <SelectOption\n          key={option.id || option.label}\n          {...option}\n        />\n      ))}\n    </select>\n  );\n};\n","import React from 'react';\nimport { WithLabel } from '../hocs/WithLabel';\nimport { componentList } from \"./componentList\";\nimport { WithModule } from '../hocs/FactFind/WithModule';\n\n// Recursive component\nexport const RecursiveFactfindBuilder = ({ components }) => (\n  components.map(component => {\n    let Component = componentList[component.module.type] || null;\n    if (Component && component.label) {\n      Component = WithLabel(Component);\n    }\n    const ComponentWithModule = WithModule(Component);\n\n    return (\n      <ComponentWithModule\n        {...component}\n        key={component.module.id}\n      >\n        {(component.children && component.children.length > 0) &&\n          <RecursiveFactfindBuilder components={component.children} />\n        }\n      </ComponentWithModule>\n    );\n  })\n);\n","import React from 'react';\n\nexport const WithLabel = WrappedComponent => props => {\n  const { label, ...restProps } = props;\n\n  if (!label) {\n    return <WrappedComponent {...restProps} />;\n  }\n\n  const labelProps = {};\n  labelProps.className = label.position;\n  \n  let LabelWrapper = \"span\";\n  if ([\"top\", \"bottom\"].includes(label.position)) {\n    LabelWrapper = \"div\";\n  }\n  const labelText = <LabelWrapper>{label.text}</LabelWrapper>;\n\n  let labelContent = null;\n  if ([\"bottom\", \"right\"].includes(label.position)) {\n    labelContent = (\n      <>\n        <WrappedComponent {...restProps} />\n        {labelText}\n      </>\n    );\n  } else {\n    labelContent = (\n      <>\n        {labelText}\n        <WrappedComponent {...restProps} />\n      </>\n    );\n  }\n\n  return (\n    <label htmlFor={restProps.data.id} {...labelProps}>\n      {labelContent}\n    </label>\n  );\n};\n","import React from 'react';\n\nexport const WithModule = WrappedComponent => props => {\n  const { children, module, ...restProps } = props;\n\n  const returnElement = (\n    <>\n      {WrappedComponent ? <WrappedComponent {...restProps} /> : null}\n      {children}\n    </>\n  );\n\n  if (!module) {\n    return returnElement;\n  }\n\n  return (\n    <div\n      key={module.id}\n      id={module.name || module.id}\n      className={`module ${module.type}`}\n      data-parent={module.parent}\n    >\n      {returnElement}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { WithLoading } from '../../components/hocs/WithLoading';\nimport { RecursiveFactfindBuilder } from '../../components/FactFind/RecursiveFactfindBuilder';\nimport FactfindData from '../../data/factfind.json';\n\nconst EmptyWithLoading = WithLoading(null);\n\nexport const FactFind = props => {\n  const [data, setData] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(\n    () => {\n      const timer = setTimeout(\n        async () => {\n          // const response = await fetch('model/factfind.json');\n          // console.log(response);\n          // if (!response.ok) {\n          //   return false;\n          // }\n          // console.log(await response.json());\n          // const apiData = await response.json();\n          const apiData = FactfindData || {};\n          setData(apiData);\n          setLoading(false);\n        },\n        500\n      );\n\n      return () => {\n        clearTimeout(timer);\n      };\n    },\n    []\n  );\n\n  if (loading) {\n    return <EmptyWithLoading isLoading={loading} />;\n  }\n\n  return (\n    <RecursiveFactfindBuilder components={[data]} />\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport { FactFind } from './containers/FactFind';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <FactFind />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}